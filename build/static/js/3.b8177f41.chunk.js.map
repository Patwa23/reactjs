{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_module_css__WEBPACK_IMPORTED_MODULE_1__","_Input_module_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","validationError","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","a","createElement","elementType","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","_this","_Users_patwa_Mondrian_reactjs_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","checkValidity","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","_this2","formElementsArray","id","config","form","formElement","react__WEBPACK_IMPORTED_MODULE_6___default","_components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_9__","loading","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_11__","errorMessage","error","message","authRedirect","isAuthenticated","react_router_dom__WEBPACK_IMPORTED_MODULE_8__","to","onSubmit","_components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_10__","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions"],"mappings":"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","file":"static/js/3.b8177f41.chunk.js","sourcesContent":["import React from 'react';\n\nimport classes from './Input.module.css';\n\nconst input = (props) =>{\n    let inputElement = null;\n    let validationError = null;\n    const inputClasses = [classes.InputElement];\n\n    if(props.invalid && props.shouldValidate && props.touched){\n        inputClasses.push(classes.Invalid);\n        validationError = <p>Please enter a valid value!</p>;\n    }\n\n    switch(props.elementType) {\n        case('input'):\n            inputElement = <input \n                className={inputClasses.join(' ')} \n                {...props.elementConfig}\n                value={props.value} \n                onChange={props.changed}/>; \n                break;\n        case('textarea'):\n            inputElement = <textarea \n                className={inputClasses.join(' ')} \n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}/>;\n            break;\n        case('select'):\n            inputElement = ( \n            <select \n                className={inputClasses.join(' ')}\n                value={props.value}\n                onChange={props.changed}>\n                {props.elementConfig.options.map(option => (\n                    <option key={option.value} value={option.value}>\n                        {option.displayValue}\n                    </option>\n                ))}     \n            </select>\n            );\n            break;\n        default:\n            inputElement = <input \n                className={inputClasses.join(' ')} \n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}/>;          \n    }\n\n    return(\n        <div className={classes.Input}>\n            <label className={classes.Label} >{props.label}</label>\n            {inputElement}\n            {validationError}\n        </div>\n    );\n};\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1-o_J\",\"Label\":\"Input_Label__2ULE2\",\"InputElement\":\"Input_InputElement__13O-A\",\"Invalid\":\"Input_Invalid___u62G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1QsSw\"};","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport { updateObject , checkValidity } from '../../share/utility';\n\nclass Auth extends Component{\n    state= {\n        controls:{\n            email: {\n                elementType:'input',\n                elementConfig:{\n                    type:'email',\n                    placeholder:'Mail Address'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                    isEmail:true\n                },\n                valid: false,\n                touched:false\n            },\n            password: {\n                elementType:'input',\n                elementConfig:{\n                    type:'password',\n                    placeholder:'Password'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                    minLength:6\n                },\n                valid: false,\n                touched:false\n            }\n        },\n        isSignup: true,\n    }\n\n    componentDidMount(){\n        if(!this.props.buildingBurger && this.props.authRedirectPath !== '/'){\n            this.props.onSetAuthRedirectPath();\n        }\n    }\n\n    \n    inputChangedHandler = (event, controlName) => {\n        // const updatedControls = {\n        //     ...this.state.controls,\n        //     [controlName]: {\n        //         ...this.state.controls[controlName],\n        //         value: event.target.value,\n        //         valid:this.checkValidity(event.target.value,this.state.controls[controlName].validation),\n        //         touched: true,\n        //     }\n        // };\n        const updatedControls = updateObject(this.state.controls,{\n                [controlName]: updateObject(this.state.controls[controlName] , {\n                    value: event.target.value,\n                    valid:checkValidity(event.target.value,this.state.controls[controlName].validation),\n                    touched: true,\n                })   \n        });\n        this.setState({controls:updatedControls});\n    }\n\n    submitHandler = (event) => {\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email.value,this.state.controls.password.value,this.state.isSignup);\n    }\n\n    switchAuthModeHandler = () => {\n        this.setState(prevState => {\n            return {isSignup: !prevState.isSignup};\n        })\n    }\n\n    render () {\n        const formElementsArray = [];\n        for(let key in this.state.controls){\n            formElementsArray.push({\n                id:key,\n                config:this.state.controls[key]\n            });\n        }\n\n        let form = formElementsArray.map(formElement=>(\n            <Input\n                key={formElement.id} \n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={(event)=>this.inputChangedHandler(event,formElement.id)}/>\n        ));\n\n        if(this.props.loading){\n            form = <Spinner/>\n        }\n\n        let errorMessage = null;\n        if(this.props.error){\n            errorMessage = (\n                <p>{this.props.error.message}</p>\n            );\n        }\n\n        let authRedirect = null;\n        if(this.props.isAuthenticated){\n            authRedirect = <Redirect to={this.props.authRedirectPath}/>\n        }\n\n        return (\n            <div className={classes.Auth}>\n                {authRedirect}\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType=\"Success\">SUBMIT</Button>\n                </form>\n                <Button \n                    clicked={this.switchAuthModeHandler}\n                    btnType=\"Danger\">SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}</Button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token!=null,\n        buildingBurger: state.burgerBuilder.building,\n        authRedirectPath: state.auth.authRedirectPath\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (email,password,isSignup) => dispatch(actions.auth(email,password,isSignup)),\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n    };\n};\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Auth);\n"],"sourceRoot":""}