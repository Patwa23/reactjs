{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_module_css__WEBPACK_IMPORTED_MODULE_1__","_Input_module_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","validationError","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","a","createElement","elementType","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","ContactData","checkoutSummary","react_default","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","state","orderForm","name","type","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","country","email","deliveryMethod","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","_this","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","defineProperty","setState","_this2","this","formElementsArray","id","config","form","onSubmit","formElement","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","Redirect","to","purchasedRedirect","purchased","CheckoutSummary_CheckoutSummary","Route","path","match","component"],"mappings":"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","file":"static/js/1.996f79e1.chunk.js","sourcesContent":["import React from 'react';\n\nimport classes from './Input.module.css';\n\nconst input = (props) =>{\n    let inputElement = null;\n    let validationError = null;\n    const inputClasses = [classes.InputElement];\n\n    if(props.invalid && props.shouldValidate && props.touched){\n        inputClasses.push(classes.Invalid);\n        validationError = <p>Please enter a valid value!</p>;\n    }\n\n    switch(props.elementType) {\n        case('input'):\n            inputElement = <input \n                className={inputClasses.join(' ')} \n                {...props.elementConfig}\n                value={props.value} \n                onChange={props.changed}/>; \n                break;\n        case('textarea'):\n            inputElement = <textarea \n                className={inputClasses.join(' ')} \n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}/>;\n            break;\n        case('select'):\n            inputElement = ( \n            <select \n                className={inputClasses.join(' ')}\n                value={props.value}\n                onChange={props.changed}>\n                {props.elementConfig.options.map(option => (\n                    <option key={option.value} value={option.value}>\n                        {option.displayValue}\n                    </option>\n                ))}     \n            </select>\n            );\n            break;\n        default:\n            inputElement = <input \n                className={inputClasses.join(' ')} \n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}/>;          \n    }\n\n    return(\n        <div className={classes.Input}>\n            <label className={classes.Label} >{props.label}</label>\n            {inputElement}\n            {validationError}\n        </div>\n    );\n};\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1-o_J\",\"Label\":\"Input_Label__2ULE2\",\"InputElement\":\"Input_InputElement__13O-A\",\"Invalid\":\"Input_Invalid___u62G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__14qaV\"};","import React from 'react';\n\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\nimport classes from './CheckoutSummary.css';\n\nconst checkoutSummary = (props) => {\n    return (\n        <div className={classes.CheckoutSummary}>\n            <h1>We hope it tastes well !</h1>\n            <div style={{width:'100%', margin:'auto'}}>\n                <Burger ingredients={props.ingredients} />\n            </div>\n            <Button \n                btnType=\"Danger\"\n                clicked={props.checkoutCancelled}>CANCEL</Button>\n            <Button \n                btnType=\"Success\"\n                clicked={props.checkoutContinued}>CONTINUE</Button>\n        </div>\n    );\n}\n\nexport default checkoutSummary;","import React ,{Component}  from 'react';\nimport { connect } from 'react-redux';\n\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport classes from './ContactData.module.css';\nimport axios from '../../../axios-orders';\nimport Input from '../../../components/UI/Input/Input';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\nimport { updateObject , checkValidity} from '../../../share/utility';\n\nclass ContactData extends Component{\n    state={\n        orderForm:{\n                name: {\n                    elementType:'input',\n                    elementConfig:{\n                        type:'text',\n                        placeholder:'Your Name'\n                    },\n                    value:'',\n                    validation:{\n                        required:true\n                    },\n                    valid: false,\n                    touched:false\n                },\n                street: {\n                    elementType:'input',\n                    elementConfig:{\n                        type:'text',\n                        placeholder:'Street'\n                    },\n                    value:'',\n                    validation:{\n                        required:true\n                    },\n                    valid: false,\n                    touched:false\n                },\n                zipCode: {\n                    elementType:'input',\n                    elementConfig:{\n                        type:'text',\n                        placeholder:'Zip Code'\n                    },\n                    value:'',\n                    validation:{\n                        required:true,\n                        minLength:5,\n                        maxLength:5\n                    },\n                    valid: false,\n                    touched:false\n                },\n                country: {\n                    elementType:'input',\n                    elementConfig:{\n                        type:'text',\n                        placeholder:'Country'\n                    },\n                    value:'',\n                    validation:{\n                        required:true\n                    },\n                    valid: false,\n                    touched:false\n                },\n                email: {\n                    elementType:'input',\n                    elementConfig:{\n                        type:'text',\n                        placeholder:'Your E-Mail'\n                    },\n                    value:'',\n                    validation:{\n                        required:true\n                    },\n                    valid: false,\n                    touched:false\n                }, \n                deliveryMethod:{\n                    elementType:'select',\n                    elementConfig:{\n                        options:[\n                            {value:'fastest',displayValue:'Fastest'},\n                            {value:'cheapest',displayValue:'Cheapest'},                           \n                        ]\n                    },\n                    value:'fastest',\n                    valid:true,\n                    validation:{}\n                },             \n            },\n            formIsValid:false,\n          //  loading:false \n    }\n\n    orderHandler = (event) =>{\n        event.preventDefault();\n       // this.setState({loading:true});\n        const formData = {};\n        for (let formElementIdentifier in this.state.orderForm){\n            formData[formElementIdentifier]=this.state.orderForm[formElementIdentifier].value;\n        }\n        const order = {\n            ingredients: this.props.ings,\n            price: this.props.price,\n            orderData: formData,\n            userId: this.props.userId\n            // customer: {\n            //     name: 'Prakash Patwa',\n            //     address: {\n            //         street: 'Rosa Spierlaan',\n            //         zipCode: '1187 PE',\n            //         country: 'Netherlands',\n            //     },\n            //     email: 'prak.patwa@gmail.com',              \n            // },\n            // deliveryMethod: 'fastest'    \n        }\n\n        this.props.onOrderBurger(order,this.props.token);\n        // axios.post('/orders.json', orders)  \n        //         .then(response => {\n        //             //console.log(response))\n        //             this.setState({loading:false});\n        //             this.props.history.push('/');\n        //         })\n        //         .catch(error =>{ \n        //             //console.log(error)\n        //             this.setState({loading:false});\n        //         });\n    }\n\n    inputChangedHandler = (event,inputIdentifier) => {\n        //console.log(event.target.value);\n        // const updatedOrderForm = {\n        //     ...this.state.orderForm\n        // };\n        // const updatedFormElement = {\n        //     ...updatedOrderForm[inputIdentifier]\n        // }\n        // updatedFormElement.value=event.target.value;\n        // updatedFormElement.valid=this.checkValidity(updatedFormElement.value,updatedFormElement.validation);\n        // updatedFormElement.touched = true;\n        // updatedOrderForm[inputIdentifier]= updatedFormElement;    \n        // console.log(updatedFormElement);\n\n        // using update Object\n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier],{\n            value: event.target.value,\n            valid: checkValidity(event.target.value,this.state.orderForm[inputIdentifier].validation),\n            touched: true,\n        });\n        const updatedOrderForm = updateObject(this.state.orderForm,{\n            [inputIdentifier]: updatedFormElement\n        });\n\n        let formIsValid= true;\n        for(let inputIdentifier in updatedOrderForm){\n            formIsValid= updatedOrderForm[inputIdentifier].valid && formIsValid;\n        }\n        this.setState({orderForm:updatedOrderForm,formIsValid:formIsValid});\n    }\n\n    render(){\n        const formElementsArray = [];\n        for(let key in this.state.orderForm){\n            formElementsArray.push({\n                id:key,\n                config:this.state.orderForm[key]\n            });\n        }\n        let form = (\n                 <form onSubmit={this.orderHandler}>\n                    {/* <Input elementType=\"...\" elementConfig=\"...\" value=\"...\"/> */}\n                    {formElementsArray.map(formElement=>(\n                        <Input\n                            key={formElement.id} \n                            elementType={formElement.config.elementType}\n                            elementConfig={formElement.config.elementConfig}\n                            value={formElement.config.value}\n                            invalid={!formElement.config.valid}\n                            shouldValidate={formElement.config.validation}\n                            touched={formElement.config.touched}\n                            changed={(event)=>this.inputChangedHandler(event,formElement.id)}/>\n                    ))}\n                    <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\n                </form>\n        );\n        if(this.props.loading){\n            form =<Spinner/>\n        }\n\n        return (\n            <div className={classes.ContactData}>\n                <h4>Enter your Contact Data</h4>\n                {form}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return{\n        onOrderBurger: (orderData,token) => dispatch(actions.purchaseBurger(orderData,token))\n    };  \n};\n\nexport default connect(mapStateToProps,mapDispatchToProps)(withErrorHandler(ContactData,axios));","import React , {Component} from 'react';\nimport {Route, Redirect} from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\nimport ContactData from './ContactData/ContactData';\n//import * as actions from '../../store/actions/index';\n\nclass Checkout extends Component {\n    // state ={\n    //     ingredients :null,\n    //     totalPrice: 0\n    // }\n\n    // componentWillMount(){\n    //     const query = new URLSearchParams(this.props.location.search);\n    //     const ingredients = {};\n    //     let price = 0;\n    //     for(let param of query.entries()){\n    //         if(param[0]==='price'){\n    //             price = param[1];\n    //         }else {\n    //             ingredients[param[0]]=+param[1];\n    //         }\n            \n    //     }\n    //     this.setState({ingredients:ingredients , totalPrice:price});\n    // }\n    // componentWillMount(){\n    //     this.props.onInitPurchase();\n    // }\n\n    checkoutCancelledHandler=() =>{\n        this.props.history.goBack();\n    }\n\n    checkoutContinuedHandler = () =>{\n        this.props.history.replace('/checkout/contact-data');\n    }\n\n\n    render() {\n        let summary =<Redirect to =\"/\"/>\n        if(this.props.ings){\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\"/>:null;\n            summary = (\n                <div>\n                    {purchasedRedirect}\n                    <CheckoutSummary \n                        ingredients={this.props.ings}\n                        checkoutCancelled={this.checkoutCancelledHandler}\n                        checkoutContinued={this.checkoutContinuedHandler}/>\n                    <Route \n                        path={this.props.match.path+'/contact-data'} \n                        // render = {(props)=> (<ContactData ingredients = {this.state.ingredients} price={this.state.totalPrice} {...props}/> )} \n                        component={ContactData}/>\n                </div>\n            );\n        }\n        return summary;\n    }\n\n}\n\nconst mapStateToProps = state =>{\n    return {\n        ings: state.burgerBuilder.ingredients,\n        purchased: state.order.purchased\n    }\n}\n\n// const mapDispatchToProps = dispatch =>{\n//     return {\n//         onInitPurchase: () => dispatch(actions.purchaseInit())\n//     };\n// };\n\nexport default connect(mapStateToProps)(Checkout);"],"sourceRoot":""}